# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

variables:
  appName: helloworld
  tfBackendStorageAccountName: $(appName)tfstatesa
  tfBackendStorageContainerName: tfstate
  tfBackendFileName: $(appName).tfstate

trigger:
  - master
  - features/*

pool:
  vmImage: 'ubuntu-latest'

steps:
- task: FuncToolsInstaller@0
  inputs:
    version: '3.0.2534'

- task: ms-devlabs.custom-terraform-tasks.custom-terraform-installer-task.TerraformInstaller@0
  displayName: 'Install Terraform 0.12.3'

- task: AzureKeyVault@1
  inputs:
    azureSubscription: $(appName)
    KeyVaultName: 'nexus-$(appName)-kv'
  displayName: 'Get key vault secrets as pipeline variables'

- task: AzureCLI@1
  inputs:
    azureSubscription: $(appName)
    scriptLocation: 'inlineScript'
    inlineScript: 'terraform version'
  displayName: "Terraform Version"

- script: |    
    echo '#######Initializing Credentials########'
    export ARM_CLIENT_ID=$(sp-ado-client-id) \
      ARM_CLIENT_SECRET=$(sp-ado-client-secret) \
      ARM_SUBSCRIPTION_ID=$(sp-ado-subscription-id) \
      ARM_TENANT_ID=$(sp-ado-tenant-id)
    echo '[+] Exported credentials'

    echo '#######Terraform Init########'
    terraform init -backend-config="storage_account_name=$(tfBackendStorageAccountName)" \
      -backend-config="container_name=$(tfBackendStorageContainerName)" \
      -backend-config="access_key=$(sa-tfstate)" \
      -backend-config="key=$(tfBackendFileName)"

    echo '#######Switching Terraform Workspaces#######'
    # Remove 'release/' from the branch name and replace special characters with hypens
    BRANCH_NAME=$(Build.SourceBranchName)
    echo "[+] Current branch is $BRANCH_NAME"

    # If branch is not master, switch to its workspace
    if [ $BRANCH_NAME != 'master' ]; then
      # If workspace does not exist, create it
      WORKSPACE_NAME=$(echo ${BRANCH_NAME/'release/'/''} | tr -c '[:alnum:]\n\r' '-')
      echo "[+] Swiching to Workspace $WORKSPACE_NAME"
      terraform workspace select $WORKSPACE_NAME || terraform workspace new $WORKSPACE_NAME
    else
      echo "[+] Master branch found. Workspace will remain 'default'"
    fi

    echo '#######Terraform Plan########'
    terraform plan -out="out.plan"
    
    echo '#######Terraform Apply########'
    terraform apply out.plan
  displayName: 'Terraform Init, Workspace, Plan and Apply '